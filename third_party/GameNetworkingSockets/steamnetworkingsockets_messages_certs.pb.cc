// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CMsgSteamNetworkingIdentityLegacyBinary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        generic_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        generic_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ipv6_and_port_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        steam_id_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingIdentityLegacyBinary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal _CMsgSteamNetworkingIdentityLegacyBinary_default_instance_;

inline constexpr CMsgSteamDatagramCertificateSigned::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        private_key_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cert_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ca_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ca_key_id_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgSteamDatagramCertificateSignedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateSignedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateSignedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificateSigned _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateSignedDefaultTypeInternal _CMsgSteamDatagramCertificateSigned_default_instance_;

inline constexpr CMsgSteamDatagramCertificate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gameserver_datacenter_ids_{},
        app_ids_{},
        ip_addresses_{},
        key_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        legacy_identity_binary_{nullptr},
        legacy_steam_id_{::uint64_t{0u}},
        key_type_{static_cast< ::CMsgSteamDatagramCertificate_EKeyType >(0)},
        time_created_{0u},
        time_expiry_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgSteamDatagramCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateDefaultTypeInternal _CMsgSteamDatagramCertificate_default_instance_;

inline constexpr CMsgSteamDatagramCertificateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cert_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgSteamDatagramCertificateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateRequestDefaultTypeInternal _CMsgSteamDatagramCertificateRequest_default_instance_;
static ::_pb::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto = nullptr;
const ::uint32_t TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.steam_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_bytes_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_string_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.ipv6_and_port_),
    3,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.key_type_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.key_data_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.legacy_steam_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.identity_string_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.time_created_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.time_expiry_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.app_ids_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.ip_addresses_),
    4,
    0,
    3,
    2,
    1,
    ~0u,
    5,
    6,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.cert_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.ca_key_id_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.ca_signature_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.private_key_data_),
    1,
    3,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _impl_.cert_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::CMsgSteamNetworkingIdentityLegacyBinary)},
        {16, 34, -1, sizeof(::CMsgSteamDatagramCertificate)},
        {44, 56, -1, sizeof(::CMsgSteamDatagramCertificateSigned)},
        {60, 69, -1, sizeof(::CMsgSteamDatagramCertificateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_._instance,
    &::_CMsgSteamDatagramCertificate_default_instance_._instance,
    &::_CMsgSteamDatagramCertificateSigned_default_instance_._instance,
    &::_CMsgSteamDatagramCertificateRequest_default_instance_._instance,
};
const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+steamnetworkingsockets_messages_certs."
    "proto\"\201\001\n\'CMsgSteamNetworkingIdentityLeg"
    "acyBinary\022\020\n\010steam_id\030\020 \001(\006\022\025\n\rgeneric_b"
    "ytes\030\002 \001(\014\022\026\n\016generic_string\030\003 \001(\t\022\025\n\rip"
    "v6_and_port\030\004 \001(\014\"\201\003\n\034CMsgSteamDatagramC"
    "ertificate\0228\n\010key_type\030\001 \001(\0162&.CMsgSteam"
    "DatagramCertificate.EKeyType\022\020\n\010key_data"
    "\030\002 \001(\014\022\027\n\017legacy_steam_id\030\004 \001(\006\022H\n\026legac"
    "y_identity_binary\030\013 \001(\0132(.CMsgSteamNetwo"
    "rkingIdentityLegacyBinary\022\027\n\017identity_st"
    "ring\030\014 \001(\t\022!\n\031gameserver_datacenter_ids\030"
    "\005 \003(\007\022\024\n\014time_created\030\010 \001(\007\022\023\n\013time_expi"
    "ry\030\t \001(\007\022\017\n\007app_ids\030\n \003(\r\022\024\n\014ip_addresse"
    "s\030\r \003(\t\"$\n\010EKeyType\022\013\n\007INVALID\020\000\022\013\n\007ED25"
    "519\020\001\"u\n\"CMsgSteamDatagramCertificateSig"
    "ned\022\014\n\004cert\030\004 \001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024\n\014"
    "ca_signature\030\006 \001(\014\022\030\n\020private_key_data\030\001"
    " \001(\014\"R\n#CMsgSteamDatagramCertificateRequ"
    "est\022+\n\004cert\030\001 \001(\0132\035.CMsgSteamDatagramCer"
    "tificateB\005H\001\200\001\000"
};
static ::absl::once_flag descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto = {
    false,
    false,
    775,
    descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    "steamnetworkingsockets_messages_certs.proto",
    &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets,
    file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter() {
  return &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steamnetworkingsockets_5fmessages_5fcerts_2eproto(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramCertificate_EKeyType_internal_data_[] = {
    131072u, 0u, };
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
constexpr int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class CMsgSteamNetworkingIdentityLegacyBinary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingIdentityLegacyBinary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_generic_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generic_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipv6_and_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamNetworkingIdentityLegacyBinary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        generic_bytes_(arena, from.generic_bytes_),
        generic_string_(arena, from.generic_string_),
        ipv6_and_port_(arena, from.ipv6_and_port_) {}

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(
    ::google::protobuf::Arena* arena,
    const CMsgSteamNetworkingIdentityLegacyBinary& from)
    : ::google::protobuf::Message(arena) {
  CMsgSteamNetworkingIdentityLegacyBinary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.steam_id_ = from._impl_.steam_id_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamNetworkingIdentityLegacyBinary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        generic_bytes_(arena),
        generic_string_(arena),
        ipv6_and_port_(arena) {}

inline void CMsgSteamNetworkingIdentityLegacyBinary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.steam_id_ = {};
}
CMsgSteamNetworkingIdentityLegacyBinary::~CMsgSteamNetworkingIdentityLegacyBinary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIdentityLegacyBinary)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.generic_bytes_.Destroy();
  _impl_.generic_string_.Destroy();
  _impl_.ipv6_and_port_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CMsgSteamNetworkingIdentityLegacyBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIdentityLegacyBinary)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.generic_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.generic_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ipv6_and_port_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.steam_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingIdentityLegacyBinary::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 62, 2> CMsgSteamNetworkingIdentityLegacyBinary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_._has_bits_),
    0, // no _extensions_
    16, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934513,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional fixed64 steam_id = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.steam_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes generic_bytes = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_bytes_)}},
    // optional string generic_string = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_string_)}},
    // optional bytes ipv6_and_port = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.ipv6_and_port_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes generic_bytes = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_bytes_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string generic_string = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_string_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bytes ipv6_and_port = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.ipv6_and_port_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed64 steam_id = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.steam_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  // no aux_entries
  {{
    "\47\0\16\0\0\0\0\0"
    "CMsgSteamNetworkingIdentityLegacyBinary"
    "generic_string"
  }},
};

::uint8_t* CMsgSteamNetworkingIdentityLegacyBinary::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_generic_bytes();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_generic_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamNetworkingIdentityLegacyBinary.generic_string");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_ipv6_and_port();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        16, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIdentityLegacyBinary)
  return target;
}

::size_t CMsgSteamNetworkingIdentityLegacyBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes generic_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_generic_bytes());
    }

    // optional string generic_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_generic_string());
    }

    // optional bytes ipv6_and_port = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_ipv6_and_port());
    }

    // optional fixed64 steam_id = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 10;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamNetworkingIdentityLegacyBinary::_class_data_ = {
    CMsgSteamNetworkingIdentityLegacyBinary::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CMsgSteamNetworkingIdentityLegacyBinary::GetClassData() const {
  return &_class_data_;
}

void CMsgSteamNetworkingIdentityLegacyBinary::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamNetworkingIdentityLegacyBinary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamNetworkingIdentityLegacyBinary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_generic_bytes(from._internal_generic_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_generic_string(from._internal_generic_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ipv6_and_port(from._internal_ipv6_and_port());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamNetworkingIdentityLegacyBinary::CopyFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamNetworkingIdentityLegacyBinary::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CMsgSteamNetworkingIdentityLegacyBinary::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CMsgSteamNetworkingIdentityLegacyBinary::InternalSwap(CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.generic_bytes_, &other->_impl_.generic_bytes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.generic_string_, &other->_impl_.generic_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ipv6_and_port_, &other->_impl_.ipv6_and_port_, arena);
        swap(_impl_.steam_id_, other->_impl_.steam_id_);
}

::google::protobuf::Metadata CMsgSteamNetworkingIdentityLegacyBinary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0]);
}
// ===================================================================

class CMsgSteamDatagramCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_identity_binary(const CMsgSteamDatagramCertificate* msg);
  static void set_has_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgSteamNetworkingIdentityLegacyBinary& CMsgSteamDatagramCertificate::_Internal::legacy_identity_binary(const CMsgSteamDatagramCertificate* msg) {
  return *msg->_impl_.legacy_identity_binary_;
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificate)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        gameserver_datacenter_ids_{visibility, arena, from.gameserver_datacenter_ids_},
        app_ids_{visibility, arena, from.app_ids_},
        ip_addresses_{visibility, arena, from.ip_addresses_},
        key_data_(arena, from.key_data_),
        identity_string_(arena, from.identity_string_) {}

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(
    ::google::protobuf::Arena* arena,
    const CMsgSteamDatagramCertificate& from)
    : ::google::protobuf::Message(arena) {
  CMsgSteamDatagramCertificate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.legacy_identity_binary_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::CMsgSteamNetworkingIdentityLegacyBinary>(arena, *from._impl_.legacy_identity_binary_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_steam_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_steam_id_),
           offsetof(Impl_, time_expiry_) -
               offsetof(Impl_, legacy_steam_id_) +
               sizeof(Impl_::time_expiry_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificate)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        gameserver_datacenter_ids_{visibility, arena},
        app_ids_{visibility, arena},
        ip_addresses_{visibility, arena},
        key_data_(arena),
        identity_string_(arena) {}

inline void CMsgSteamDatagramCertificate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_identity_binary_),
           0,
           offsetof(Impl_, time_expiry_) -
               offsetof(Impl_, legacy_identity_binary_) +
               sizeof(Impl_::time_expiry_));
}
CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramCertificate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_data_.Destroy();
  _impl_.identity_string_.Destroy();
  delete _impl_.legacy_identity_binary_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CMsgSteamDatagramCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameserver_datacenter_ids_.Clear();
  _impl_.app_ids_.Clear();
  _impl_.ip_addresses_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.legacy_identity_binary_ != nullptr);
      _impl_.legacy_identity_binary_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.legacy_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.time_expiry_) -
        reinterpret_cast<char*>(&_impl_.legacy_steam_id_)) + sizeof(_impl_.time_expiry_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 72, 2> CMsgSteamDatagramCertificate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959204,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramCertificate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 4, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_type_)}},
    // optional bytes key_data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 legacy_steam_id = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_steam_id_)}},
    // repeated fixed32 gameserver_datacenter_ids = 5;
    {::_pbi::TcParser::FastF32R1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 time_created = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_created_)}},
    // optional fixed32 time_expiry = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_expiry_)}},
    // repeated uint32 app_ids = 10;
    {::_pbi::TcParser::FastV32R1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.app_ids_)}},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_)}},
    // optional string identity_string = 12;
    {::_pbi::TcParser::FastSS1,
     {98, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.identity_string_)}},
    // repeated string ip_addresses = 13;
    {::_pbi::TcParser::FastSR1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.ip_addresses_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_type_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bytes key_data = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed64 legacy_steam_id = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_steam_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // repeated fixed32 gameserver_datacenter_ids = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional fixed32 time_created = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_created_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 time_expiry = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_expiry_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated uint32 app_ids = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.app_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string identity_string = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.identity_string_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated string ip_addresses = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.ip_addresses_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
  }}, {{
    {0, 2},
    {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIdentityLegacyBinary>()},
  }}, {{
    "\34\0\0\0\0\0\0\0\0\17\14\0\0\0\0\0"
    "CMsgSteamDatagramCertificate"
    "identity_string"
    "ip_addresses"
  }},
};

::uint8_t* CMsgSteamDatagramCertificate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_key_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this->_internal_legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0, n = this->_internal_gameserver_datacenter_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this->_internal_gameserver_datacenter_ids().Get(i), target);
  }

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this->_internal_time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this->_internal_time_expiry(), target);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0, n = this->_internal_app_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_app_ids().Get(i), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::legacy_identity_binary(this),
        _Internal::legacy_identity_binary(this).GetCachedSize(), target, stream);
  }

  // optional string identity_string = 12;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramCertificate.identity_string");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // repeated string ip_addresses = 13;
  for (int i = 0, n = this->_internal_ip_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_ip_addresses().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramCertificate.ip_addresses");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificate)
  return target;
}

::size_t CMsgSteamDatagramCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_gameserver_datacenter_ids_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_gameserver_datacenter_ids_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 app_ids = 10;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_app_ids())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_app_ids_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated string ip_addresses = 13;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_ip_addresses().size());
  for (int i = 0, n = _internal_ip_addresses().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_ip_addresses().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_key_data());
    }

    // optional string identity_string = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_identity_string());
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.legacy_identity_binary_);
    }

    // optional fixed64 legacy_steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_key_type());
    }

    // optional fixed32 time_created = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional fixed32 time_expiry = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramCertificate::_class_data_ = {
    CMsgSteamDatagramCertificate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CMsgSteamDatagramCertificate::GetClassData() const {
  return &_class_data_;
}

void CMsgSteamDatagramCertificate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificate*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gameserver_datacenter_ids()->MergeFrom(from._internal_gameserver_datacenter_ids());
  _this->_internal_mutable_app_ids()->MergeFrom(from._internal_app_ids());
  _this->_internal_mutable_ip_addresses()->MergeFrom(from._internal_ip_addresses());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key_data(from._internal_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_identity_string(from._internal_identity_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_legacy_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(
          from._internal_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.legacy_steam_id_ = from._impl_.legacy_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.key_type_ = from._impl_.key_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_created_ = from._impl_.time_created_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.time_expiry_ = from._impl_.time_expiry_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramCertificate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CMsgSteamDatagramCertificate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CMsgSteamDatagramCertificate::InternalSwap(CMsgSteamDatagramCertificate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gameserver_datacenter_ids_.InternalSwap(&other->_impl_.gameserver_datacenter_ids_);
  _impl_.app_ids_.InternalSwap(&other->_impl_.app_ids_);
  _impl_.ip_addresses_.InternalSwap(&other->_impl_.ip_addresses_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_data_, &other->_impl_.key_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_string_, &other->_impl_.identity_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_expiry_)
      + sizeof(CMsgSteamDatagramCertificate::_impl_.time_expiry_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_)>(
          reinterpret_cast<char*>(&_impl_.legacy_identity_binary_),
          reinterpret_cast<char*>(&other->_impl_.legacy_identity_binary_));
}

::google::protobuf::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1]);
}
// ===================================================================

class CMsgSteamDatagramCertificateSigned::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificateSigned>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_._has_bits_);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ca_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ca_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_private_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateSigned)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateSigned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        private_key_data_(arena, from.private_key_data_),
        cert_(arena, from.cert_),
        ca_signature_(arena, from.ca_signature_) {}

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(
    ::google::protobuf::Arena* arena,
    const CMsgSteamDatagramCertificateSigned& from)
    : ::google::protobuf::Message(arena) {
  CMsgSteamDatagramCertificateSigned* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.ca_key_id_ = from._impl_.ca_key_id_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateSigned)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateSigned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        private_key_data_(arena),
        cert_(arena),
        ca_signature_(arena) {}

inline void CMsgSteamDatagramCertificateSigned::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ca_key_id_ = {};
}
CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateSigned)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.private_key_data_.Destroy();
  _impl_.cert_.Destroy();
  _impl_.ca_signature_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CMsgSteamDatagramCertificateSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateSigned)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.private_key_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ca_signature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.ca_key_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificateSigned::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 0, 2> CMsgSteamDatagramCertificateSigned::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967238,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgSteamDatagramCertificateSigned_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes private_key_data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.private_key_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes cert = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.cert_)}},
    // optional fixed64 ca_key_id = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_key_id_)}},
    // optional bytes ca_signature = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes private_key_data = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.private_key_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes cert = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.cert_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed64 ca_key_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_key_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional bytes ca_signature = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_signature_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CMsgSteamDatagramCertificateSigned::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateSigned)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes private_key_data = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_private_key_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cert();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        5, this->_internal_ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_ca_signature();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateSigned)
  return target;
}

::size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateSigned)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes private_key_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_private_key_data());
    }

    // optional bytes cert = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_cert());
    }

    // optional bytes ca_signature = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramCertificateSigned::_class_data_ = {
    CMsgSteamDatagramCertificateSigned::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CMsgSteamDatagramCertificateSigned::GetClassData() const {
  return &_class_data_;
}

void CMsgSteamDatagramCertificateSigned::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificateSigned*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificateSigned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateSigned)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_key_data(from._internal_private_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cert(from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ca_signature(from._internal_ca_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ca_key_id_ = from._impl_.ca_key_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CMsgSteamDatagramCertificateSigned::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CMsgSteamDatagramCertificateSigned::InternalSwap(CMsgSteamDatagramCertificateSigned* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.private_key_data_, &other->_impl_.private_key_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cert_, &other->_impl_.cert_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ca_signature_, &other->_impl_.ca_signature_, arena);
        swap(_impl_.ca_key_id_, other->_impl_.ca_key_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[2]);
}
// ===================================================================

class CMsgSteamDatagramCertificateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_._has_bits_);
  static const ::CMsgSteamDatagramCertificate& cert(const CMsgSteamDatagramCertificateRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificateRequest::_Internal::cert(const CMsgSteamDatagramCertificateRequest* msg) {
  return *msg->_impl_.cert_;
}
CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateRequest)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(
    ::google::protobuf::Arena* arena,
    const CMsgSteamDatagramCertificateRequest& from)
    : ::google::protobuf::Message(arena) {
  CMsgSteamDatagramCertificateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cert_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::CMsgSteamDatagramCertificate>(arena, *from._impl_.cert_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateRequest)
}
inline PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramCertificateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.cert_ = {};
}
CMsgSteamDatagramCertificateRequest::~CMsgSteamDatagramCertificateRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgSteamDatagramCertificateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.cert_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CMsgSteamDatagramCertificateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.cert_ != nullptr);
    _impl_.cert_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CMsgSteamDatagramCertificateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgSteamDatagramCertificateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .CMsgSteamDatagramCertificate cert = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_.cert_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificate cert = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_.cert_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificate>()},
  }}, {{
  }},
};

::uint8_t* CMsgSteamDatagramCertificateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificate cert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::cert(this),
        _Internal::cert(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateRequest)
  return target;
}

::size_t CMsgSteamDatagramCertificateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgSteamDatagramCertificate cert = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.cert_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CMsgSteamDatagramCertificateRequest::_class_data_ = {
    CMsgSteamDatagramCertificateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CMsgSteamDatagramCertificateRequest::GetClassData() const {
  return &_class_data_;
}

void CMsgSteamDatagramCertificateRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificateRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_cert()->::CMsgSteamDatagramCertificate::MergeFrom(
        from._internal_cert());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificateRequest::CopyFrom(const CMsgSteamDatagramCertificateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CMsgSteamDatagramCertificateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CMsgSteamDatagramCertificateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CMsgSteamDatagramCertificateRequest::InternalSwap(CMsgSteamDatagramCertificateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cert_, other->_impl_.cert_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
